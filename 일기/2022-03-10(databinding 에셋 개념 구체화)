로직과 뷰를 분리하기때문에 UI 아티스트가 로직을 신경쓰지않고 작업을 할 수 있다.
UI 아티스트는 UI 디자인만!

1.프레젠테이션은 로직의 데이터를 사용할 수 있어야하고 2. 로직의 값이 변경되면 프레젠테이션쪽의 값 업데이트가
가능해야한다. 예를 들면 로직측에서 시간을 재고 이를 UI에 표시하는 경우, 시간값이 변경될때마다 UI에 표시될
타이머 숫자가 업데이트되야하는 경우에 해당한다.

3. 프레젠테이션에서 플레이어의 입력에 따라 로직값을 변경할 수 있어야한다.
조금 더 포장해서 설명하면
4. 값 업데이트 뿐아니라, 프레젠테이션측에서 로직측으로 어떠한 명령을 보내어 로직측에서 작업을 할 수 있어야한다.

- Property 클래스
프로퍼티 클래스는 데이터값이 변경되었을때 처리해야할 이벤트를 위해 설계된 wrapper 클래스이다.
데이터를 감싸면서 추가적으로 데이터값이 변경되었을때 이벤트를 처리하는 수신기를 보유하고있다.
로직의 값이 변경될때 프레젠테이션의 값 업데이트가 이루어져야하는데, 이 값 업데이트 이벤트를 프로퍼티 수신기에
이벤트 전달하면 2번을 처리할 수 있다.

- Context 클래스
Data Context 클래스 내부에는 UI를 바인딩하기위한 데이터값을 Property 인스턴스로 선언한다.
Base Context 클래스는 Data Context 클래스와는 다르며 RegisterListener, RemoveListener, SetValue
세가지 메소드가 존재하며 RegisterListener는 DataNode로 구성된 DataTree를 경유하여 해당 노드의 ValueChanged 이벤트 리스너에게
이벤트를 전달하고 노드값을 반환한다.(노드값이 변경되었을때 ValueChanged에 가입되어있는 이벤트를 실행하므로 RegisterListener 메소드는
프레젠테이션측에서 데이터값을 찾게하고 값이 변경되었을때 처리해야할 이벤트를 등록하는 실질적으로 등록하는 메소드이다.)

- DataNode
데이터트리는 Context에 정의된 프로퍼티와 메소드에 대해서 체계적으로 관리하기위한 시스템이며 기본적으로 값이 변경되었을때 실행되는
콜백이 부모 노드에서 실행되면 그 부모 노드의 자식 노드들도 콜백이 호출된다. 따라서 체계적인 콜백 시스템을 만들 수 있다.

