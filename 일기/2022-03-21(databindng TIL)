목표
1. Data binding UML 작성해보기
2. Data binding 정리하기


1. UML
UML 작성법 보고 data tree에서 data node가 어떻게 움직이는지 작성해보기

2. data binding 정리
- context 클래스, data node 클래스, Property 클래스
- ReflectionUtil 클래스의 정확한 의미와 기능
- TypeInfoUtil?
- TypeInfo 를 정의하는 이유? - 제네릭 타입 클래스를 정의하기 위해서 -> 노드에 들어갈 데이터 타입은 하나로 고정되지않고 복수로 존재하며
각 클래스 별로 사용해야할 인터페이스가 다르기때문에 제네릭 타입 클래스를 작성
- NodeTypeInfo 를 상속받는 DataTypeInfo들을 구현할때 각 어느부분이 특징적으로 구현되는지?

+ 리플렉션(Reflection)
리플렉션은 런타임 중에 형식정보를 알아내는 기능(또는 클래스)이다.
처리해야할 객체의 타입이 코드 상에서 지정할 수 없고  클래스의 멤버들의 정보에 접근해야할 필요가 있는 경우
리플렉션 라이브러리를 사용한다.
Reflection 클래스에 정의된 FieldInfo, MethodInfo, PropertyInfo는 필드, 메소드, 프로퍼티 정보를
알아내기 위해 사용된다. 
클래스 객체의 멤버 함수를 MethodInfo 클래스를 통해 알아내고 이 멤버함수들의 정보(반환 타입, 매개변수 값, 함수명)
들을 알아낼 수 있다.
또한 리플렉션 클래스를 이용하여 멤버를 정의하여 클래스를 런타임중에 정의하는 것이 가능하다.


+ 프로퍼티에 관해서
기본적으로 자바의 getvalue와 setvalue 처럼 필드의 캡슐화를 위해 C#에서는 get과 set을 사용하는데,
캡슐화를 위한 변수 A와 A에 접근하기위한 public 프로퍼티 B를 선언한다. 그리고 B에서는 A의 값을 리턴하고 A에 값을 대입한다.
보통 지금까지는 이런식으로 봤지만, 그렇다고해서 프로퍼티는 항상 A의 wrapper 컨테이너로 사용되는 건 아니다.
즉, 프로퍼티도 필드로 사용할 수 있다.
