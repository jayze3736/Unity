1. RequireComponent: 특정 타입의 컴포넌트가 오브젝트에서 무조건 필요한 경우(= 의존성을 가질경우), 자동으로 추가를해준다.
(단! 오브젝트에서 공존할 수 없는 컴포넌트 예를 들면, Text와 TextMeshPro와 같은 컴포넌트의 경우 기존에 둘중 하나의 컴포넌트가 추가가 되어있으면 Dependency를 추가하지 못한다.
다시 말해서 Text가 먼저 추가가되어있고 RequireComponent로 TextMeshPro를 추가하려고 한들, 추가가 되지않는다.
또한 스크립트 로드(Awake보다 이전)시점에 RequireComponent가 실행이되므로 Awake함수에서 있으면 안되는 컴포넌트를 삭제해도 추가가 되지않는다.
또한 RequireComponent를 사용한 스크립트 컴포넌트를 제거하지않는이상 Dedendency는 제거하지 못한다.

2. Mesh Renderer란?
Mesh Rederer를 알기전에 기초가 되는 Mesh 그 다음 Mesh Filter, Mesh Renderer에 대해 알아보자.
Mesh는 Unity에서 보여지는 그래픽은 모두 Mesh를 사용한다. 정점(vertices)가 모여 edges가 되고 edges로 구성된 Polygon을 만들면 Polygon을 이용하여 Mesh를 구성하게된다.
쉽게 얘기하자면 3D 공간상에 점을 세개 이어서 삼각형을 만들게 되면 이 삼각형들이 모여 Mesh가 된다.
삼각형 Polygon에 Texture, Material을 추가하여 3D 그래픽을 만들게된다.
Mesh Filter는 Mesh를 렌더링하기위해 사용되는 장치이고 Mesh Renderer는 Material을 관리하기 위해 사용된다.

3. TextMesh, TextMeshPro, TextMeshProUGUI, TMP_Text
TextMesh: 3D Text Mesh를 렌더링하기위해 사용하는 클래스
TextMeshPro: TextMesh의 업그레이드 버전, 3D Text Mesh를 렌더링하는데 사용한다.
TextMeshProUGUI: UI Text를 렌더링하는데 사용한다.
TMP_Text: TextMeshPro, TextMeshProUGUI 두가지 속성을 모두 공유하고 있는 클래스

+) 개인적인 생각으로 TextMeshPro와 TextMeshProUGUI를 구분해놓은 이유는 UI Text와 3D Text를 렌더링하는 방식이 다르기때문이 아닐까 생각이든다.

