- Code Stripping: 사용되지않는 어셈블리어를 제거하여 빌드 시간을 단축시키는 방법이다. 사용자의 선호 레벨에 따라 제거할 어셈블리어의 종류와 양이 달라지며, 사용자가 원하면
제거되지않도록 방지하는 방법도 있다.


// JIT, AOT 컴파일러 //
JIT 컴파일(Just In Time): 중간레벨언어를 기계어로 컴파일하는 방식, 실행시점에 바이트코드를 기계어로 번역(C#, java)
AOT 컴파일(Ahead Of Time): 중간레벨언어를 기계어로 컴파일하는 방식, 실행이전에 소스코드든 바이트코드든 기계어로 번역(ex C, C++)

만약 어떤 실행 프로그램을 설치할때, AOT 컴파일 방식인 프로그램인 경우 설치과정에서 프로그램의 고급 언어를 기계어로 번역하기때문에 설치과정이 길고 설치 용량이 크다.
그렇지만 미리 기계어로 번역을 해놓았기때문에 실행할때 속도가 빠를 수 있다.
JIT 컴파일 방식인 경우에는 실행시 기계어로 번역이 되기때문에 실행 속도가 느리지만 용량이 적고 설치과정이 짧다는 장점을 가지고 있다.

// 스크립팅 백엔드 //
- 스크립팅 백엔드: 스크립트를 작성하고 컴파일을 하는데 사용하는 도구, Mono, .NET, IL2CPP가 있으며 윈도우에서 지원되는 스크립팅 백엔드는 Mono, IL2CPP이다.
Mono, .Net, IL2CPP는 닷넷 프레임워크(.NET Framework)와 유사하거나 같으며 윈도우 프로그램 개발 및 실행 환경이다. Unity에서 사용하는 C#의 기능은 이러한 스크립팅 백엔드 위에서 작동
한다.

- Mono와 IL2CPP의 차이: JIT 컴파일러를 사용하는 것은 Mono, AOT 컴파일러를 사용하는 것은 IL2CPP 따라서 각 컴파일러가 다르기때문에 사용할 컴파일 방식에 따라
사용할 스크립팅 백엔드 또한 달라진다.

- IL2CPP(Intermediate Language To C++): C++ 컴파일러를 사용하여 관리하는 닷넷 프레임워크이다. C와 C++은 AOT 컴파일러를 사용하므로 IL2CPP또한 AOT 컴파일방식으로 기계어가 번역이 
되며 IL2CPP는 관리되는 어셈블리어(Managed Assemblies)를 사용되지않는 어셈블리어를 제거하여 Stripped 어셈블리를 생성하고 이 IL을 C++ 컴파일러가 컴파일하여 기계어를 산출한다.


// 저급 언어 - 중급 언어 - 고급 언어 //

- 저급 언어: 기계(CPU)가 알아들을 수 있는 문법의 프로그래밍 언어, 기계어와 어셈블리어가 저급언어에 해당한다.

- 기계어(머신 코드): 0과 1로 이루어진 이진법체계로 표현되는 실행가능한 언어, CPU는 원체 0과 1로 이해를하기때문에 실질적으로 CPU와 소통할 수 있는 언어라고 볼 수 있다.
2진법으로 코드를 작성하면 길이가 길어지므로 16진법으로 코드 길이를 축소시킨다. CPU 사양을 보면 32bit, 64bit가 있는데, 이는 CPU가 한번에 처리할 수 있는 bit 단위를 의미한다. 즉,
CPU가 한번 코드를 읽어 수행할때마다 32bit를 읽거나 64bit를 읽고 처리한다는 것을 의미한다.
가장 낮은 수준의 프로그래밍의 언어

- 어셈블리: 컴퓨터와 소통할때 기계어를 그대로 사용하는 것은 힘들다. 예를 들면, 0000 1001 1001 0011 라는 코드를 사용자가 작성하는 것은 힘들다. 따라서
이진수를 간단한 부호로 대응하여 문법을 만들고 기계어를 조금 더 쉽게 사용할 수 있도록 만든 프로그래밍 언어가 바로 어셈블리어이다. 
기계어보다 높은 수준의 프로그래밍 언어

- IL 코드: IL의 약자는 Intermediate Language를 의미한다. Intermediate Language: 가상 머신이 해독할 수 있는 레벨의 프로그래밍 언어, 바이트 코드가 이에 해당한다.

- 바이트 코드: 가상 머신에 의해 컴파일되어 만들어진 목적 코드, 0과 1로 이루어져있는데 바이트 코드의 한 명령어의 크기가 1바이트라서 바이트 코드라고 불린다.
바이트 코드는 CPU 프로세서, 운영체제 각각의 플랫폼마다 다른 명령어를 컴파일하여 대응이 가능하다.(플랫폼에 종속되지않음)
가상 머신이 해독이 가능한 중간 레벨의 코드를 생성하는데 이를 바이트 코드라고 하며 다시 기계어로 해석해야지 실행된다. java의 경우 바이트 코드에서 기계어로 변환되는 과정은 인터프리터 
방식으로 작동한다.

- 고급 언어: 어셈블리어로는 코드 작성줄이 여전히 길고 사용이 불편하다. 사람이 사용할 수 있고 알아들을 수 있는 문법의 프로그래밍 언어가 고급 언어이다.(예: C, java)



// 가상 머신, 목적 파일, 링커 //
바이너리 코드: 0과 1로 이루어진 코드이며 목적 파일로 볼 수 있다. 실행이 불가능하기 때문에 완전한 기계어는 아니다.

목적 파일: 컴파일러가 고급 언어를 컴파일하여 컴퓨터가 해독할 수 있는 저수준 레벨의 언어로 번역한 코드 또는 결과를 의미한다. 

링커: 목적 파일을 실행파일로 변경해주는 소프트웨어적 장치, 목적 파일의 코드를 메모리에 적재시키면서 주소 변환의 과정을 거쳐 목적파일이 가공되고 실행파일이 된다.

가상 머신: 실제 CPU같은 하드웨어가 아닌 소프트웨어(프로그램)에서 구상된 머신으로 고급 언어를 현재 사용중인 운영체제와 프로세서(플랫폼)의 문법으로 바꾸어 바이트 코드와 같은
중간 레벨 언어로 만드는 기능을 수행한다.

컴파일 방식 : 소스코드를 한꺼번에 컴퓨터가 읽을 수 있는 native machine (기계)어로 변환

인터프리터 방식 : 소스코드를 빌드시에 암것도 하지 않다가, 런타임시에 한줄 한줄 읽어가며 변환

// 참고 사이트 //
저급 언어, 고급 언어 정리: https://velog.io/@woohm402/why-programming-language
바이트 코드, 가상 머신: https://shrtorznzl.tistory.com/82
바이트 코드, 가상 머신:https://greendreamtrre.tistory.com/65
AOT, JIT 컴파일러: https://jeongkyun-it.tistory.com/46
IL2CPP 작동방식: https://docs.unity3d.com/kr/2018.4/Manual/IL2CPP-HowItWorks.html
IL2CPP란: https://docs.unity3d.com/kr/2018.4/Manual/IL2CPP.html
스크립팅 백엔드: https://docs.unity3d.com/kr/2020.3/Manual/scripting-backends.html
닷넷 프레임 워크: https://ko.wikipedia.org/wiki/%EB%8B%B7%EB%84%B7_%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC?tableofcontents=0
