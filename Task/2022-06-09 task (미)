이번주 내로:
(1) Paragraph 수정: 최고의 효율로 NextPargaraph를 캐시할 수 있도록, 정상적으로 prevParagraph를 받을 수 있도록,
부모가 Dummy여도 정상적으로 paragraph를 생성할 수 있도록






GetNextParagraph에서 캐시를 사용한다면 매번 함수호출을 통해서 파라그래프를 반환하지않아도 되므로 속도측면에서 향상되지만
Map을 사용해야하므로 공간적인 측면에서 비용을 감수해야한다.

캐시를 사용하지않으면 속도측면은 저하되고 공간을 절약할 수 있다.

캐시를 사용하면서도 공간을 절약할 수 있는 방법 -> 최소한의 공간으로 최대의 효율을 얻는다.

캐시를 사용한다면 어떤 자료구조를 사용해야하는가?

- Map
- LRU Cache 알고리즘


Paragraph를 만들때, 필요할때 만드는 방법(JIT), 미리 만드는 방법(AOT)

Paragraph를 만들고 언제 해제시키는가
Page 1 - p1, p2, p3
Page 2 - *p1, *p2
Page 3 - #p1, #p2, #p3

사용가능성 여부: 만들어놓고 나중에 사용할 가능성이 있는가
페이지 활성화 여부: 현재 페이지가 활성화되어있는가 아닌가

Parargraph는 itemlist로 구성되어있음 -> list가 여러개 존재: 혹시 공간을 너무 차지하지않을까?
Cache -> Map을 이용, Paragraph마다 존재 -> int 변수 30개랑 int [30] 배열이랑 공간은 똑같아.


 



- BFS 구현: BFS는 왜 재귀로 구현이 불가능할까?, BFS는 너비우선탐색이며 시작 노드에서 child 노드들을 queue에 집어넣고
queue에서 하나를 dequeue해서 뽑은 노드에 방문 기록을 표시하고 그 노드의 child노드들을 다시 enqueue한다. 노드 조회시 dequeue하는 과정에서 조건 검사가
가능하다. (구조는 완성)
- DummyProperty 구현(-):
DummyProperty의 용도및 특징
(1) 없는 걸로 결정됨, IHelperPointable이 아닌 오브젝트는 모두 Dummy라서 클래스 추가없이도 Dummy 구별이 가능함



- map과 dictionary
map과 dictionary 모두 공통적으로 key와 value값을 가진다. key와 value값으로 매핑시킨다는점은 동일하나,
map은 중복된 key를 허용하지않지만, dictionary는 중복된 key를 허용한다.

- map과 dictionary의 구현방법? - 시간 복잡도

- Hash Table에 대하여

- c#에서 제공하는 Dictionary와 Map은 어떤 방식을 사용하는가?

- LRU 캐시기법
Least Recently Used 캐시: 가장 최근에 사용된 아이템을 삭제 우선순위를 가장 낮게 쳐주어 맨 앞으로 이동시키고 캐시 공간이 부족하면 가장 끝에 있는(참조된지 가장 오래된)
아이템을 삭제시킨다. -> Doubly Linked list와 Hash map 사용


- Linked List(완)
	- 특징
	1) 노드를 사용한 단방향 자료구조
	2) 노드는 value, nextnode로 구성됨
	3) head는 Linked List의 맨 앞의 노드를 참조하여 해당 노드가 head임을 나타내고, 다음 위치(인덱스)의 node를 nextnode에 참조시켜 현재 노드의 다음 노드를 기록해놓음
	4) linked list의 n번째 위치에 데이터 삽입시, n-1번째 노드의 next를 newnode로 참조 그리고 newnode의 next를 n번째 노드에 참조시키므로써 newnode가 n번째 노드로 삽입된다.
	5) 삭제의 경우, n번째 위치의 데이터 삭제시, n-1번쨰 노드의 next를 n+1번째로 참조시키고 해당 노드를 동적해제시키면 삭제된다.
	6) 데이터 조회시, head로부터 시작하여 노드가 참조하고있는 next를 통해 노드를 이동하고 n번째 노드 위치로 이동하면 해당 노드의 value를 리턴

	- 장점
	1) next를 지정시켜주는 것만으로 데이터 추가와 삭제가 가능하여 ArrayList에 비해 데이터 추가/삭제가 빠르다.
	2) ArrayList에 비해 메모리가 전부 사용되기까지 생성할 수 있는 노드의 개수가 제한되어있지않다.
	
	- 단점
	1) ArrayList에 비해 데이터 조회시 이동을 여러번해야하므로 속도가 느리다.

- ArrayList의 특징(완)
	- 특징
	1) ArrayList는 연속적으로 주소공간에 요소를 적재시킨다.
	2) ArrayList의 데이터 조회시, 요소들이 연속적인 주소공간에 적재된다는 점을 이용하면 배열의 시작주소로부터 n번째 요소의 위치가 얼만큼 떨어져있는지 알기때문에 메모리에 바로
	접근하여 조회가 매우 빠르다.
	3) n번째 위치에 데이터를 추가/삭제하려면 n이상의 요소들을 전부 한칸씩 이동시켜야하므로 Linked List에 비해 복잡하다는 단점이 존재한다.

- Linked List vs ArrayList(완)
두 리스트를 고르는 기준은 조회와 추가/삭제가 얼만큼 일어나는 가일 것 같다.
Linked List는 상대적으로 추가/삭제가 용이하지만 조회가 느리고
Array List는 추가/삭제가 느리지만 조회가 용이하다는 점이 있기때문이다.


- Doubly Linked List(완)
Linked list는 오로지 head로부터 단방향으로 접근하여 노드를 탐색했다. Doubly Linked List는 양방향으로 접근가능한 리스트로, head에서 next로 접근하는 방법과 tail에서 prev로 접근하는 방법 두가지가
존재하여 Linked List보다 노드 접근 속도를 높여 삭제/추가 및 조회를 더 빠르게 할 수 있다. 다만, prev가 노드에 추가되었으므로 메모리를 더 사용해야하는 단점이 존재한다.




- Hash map



Map&Dict: https://ju-hy.tistory.com/89
Map: https://blog-of-gon.tistory.com/187
LRU Cache: https://doublesprogramming.tistory.com/254
BFS: https://chanhuiseok.github.io/posts/algo-27/
